extend type Query {

    getAllMappings: [MtFieldMapping]
    mts:[String]
    getFieldsForEntity(entityName: String!): [String]

    ###Filtering
    mappingsByMt(mt: String!): [MtFieldMapping]
    mappingsByFD(fieldDescription: String!): [MtFieldMapping]
    mappingsByDF(dbField: String!): [MtFieldMapping]
    mappingsByST(status: String!): [MtFieldMapping]

    ###Sorting
    orderMappingsByFO(order: Boolean): [MtFieldMapping]
    orderMappingsByDF(order: Boolean): [MtFieldMapping]
    orderMappingsByST(order: Boolean): [MtFieldMapping]
    orderMappingsByFD(order: Boolean): [MtFieldMapping]

}

extend type Mutation {

    addMtFieldMapping(input: MtFieldMappingInput!): MtFieldMapping
    updateFieldMapping(id :Int!, input: MtFieldMappingInput!): MtFieldMapping
    deleteFieldMapping(id: Int!): Boolean
    updateMappingRule(id: Int!, fields: [String], delimiter: String, code: String): MtFieldMapping

}

type MtFieldMapping {
    id: ID!
    status: String
    databaseField: String
    tag: String
    fieldDescription: String
    entityName: String
    mappingRule: String
    mt: String
    fieldOrder: Int
}

input MtFieldMappingInput {
    status: String
    tag: String
    fieldDescription: String
    databaseField: String
    entityName: String
    mt: String
    fieldOrder: Int
    fields: [String]
    delimiter: String
    code: String
}