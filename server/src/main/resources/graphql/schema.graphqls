type Query {
    getAllDealLCs: [DealLC]
    getAllMappings: [MtFieldMapping]
    orderMappingsByFO(order: Boolean): [MtFieldMapping]
    getDealLCById(id: Int!): DealLC
    mappingsByMt(mt: String!): [MtFieldMapping]
    mappingsByFD(fieldDescription: String!): [MtFieldMapping]
    mappingsByDF(dbField: String!): [MtFieldMapping]
    mappingsByST(status: String!): [MtFieldMapping]
    mts:[String]
}

type Mutation {
    addDealLC(input: DealLCInput): DealLC
    addMtFieldMapping(input: MtFieldMappingInput!): MtFieldMapping
    exportDeal(id: Int!): String
    exportMT(id: Int!, mt:String): String
    updateFieldMapping(id :Int!, input: MtFieldMappingInput!): MtFieldMapping
    deleteFieldMapping(id: Int!): Boolean
}

type DealLC {
    dealId: ID!
    formLC: String
    dueDate: String
    expiryDate: String
    expiryPlace: String
    customerReference: String
    counterParty: String
    bankISSRef: String
    bankRMBRef: String
    creationDate: String
    currencyId: String
    lcAmount: String
    varAmountTolerance: String
    availableWith: String
    partialTranshipment: String
    transhipment: String
}

input DealLCInput {
    formLC: String
    dueDate: String
    expiryDate: String
    expiryPlace: String
    customerReference: String
    counterParty: String
    bankISSRef: String
    bankRMBRef: String
    creationDate: String
    currencyId: String
    lcAmount: String
    varAmountTolerance: String
    availableWith: String
    partialTranshipment: String
    transhipment: String
}


type MtFieldMapping {
    id: ID!
    status: String
    databaseField: String
    tag: String
    fieldDescription: String
    entityName: String
    mappingRule: String
    mt: String
    fieldOrder: Int
}

input MtFieldMappingInput {
    status: String
    tag: String
    fieldDescription: String
    mappingRule: String
    databaseField: String
    entityName: String
    mt: String
    fieldOrder: Int
}